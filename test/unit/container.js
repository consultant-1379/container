// Generated by CoffeeScript 1.6.2
(function() {
  var container, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  container = root.container;

  describe('Container', function() {
    var containerElement;

    containerElement = {};
    container = {};
    beforeEach(function() {
      containerElement = document.createElement('div');
      container = new root.Container({}, containerElement);
      container.baseUrl = '../../apps';
      return container.assetsBaseUrl = '../../assets';
    });
    afterEach(function() {
      var app, head, i, key, style, _ref, _ref1, _results;

      if (container.listener) {
        window.removeEventListener('hashchange', container.listener);
        delete this.listener;
      }
      head = document.head;
      _ref = container.assets;
      for (key in _ref) {
        style = _ref[key];
        if (style.parentNode === head) {
          style.parentNode.removeChild(style);
        }
      }
      _ref1 = container.apps;
      _results = [];
      for (i in _ref1) {
        app = _ref1[i];
        _results.push(app.stop());
      }
      return _results;
    });
    return describe('Methods', function() {
      describe('listenUrl()', function() {
        return it('should call load()', function(done) {
          window.location.hash = 'foo1';
          return setTimeout(function() {
            var load;

            load = sinon.stub(container, 'load');
            container.listenUrl();
            expect(load.called).to.be["true"];
            return done();
          }, 0);
        });
      });
      describe('load()', function() {
        it('should be called on hash change', function(done) {
          var load;

          load = sinon.stub(container, 'load');
          container.listenUrl();
          expect(load.calledOnce).to.be["true"];
          return setTimeout(function() {
            window.location.hash = 'foo3';
            return setTimeout(function() {
              expect(load.calledTwice).to.be["true"];
              load.restore();
              return done();
            }, 0);
          }, 0);
        });
        it('should not be called if hash is empty on hash change', function(done) {
          var load;

          load = sinon.stub(container, 'load');
          container.listenUrl();
          window.location.hash = '';
          return setTimeout(function() {
            expect(load.calledOnce).to.be["true"];
            load.restore();
            return done();
          }, 0);
        });
        it('should call onLoad()', function(done) {
          var onLoad;

          onLoad = container.onLoad;
          container.onLoad = function() {
            container.onLoad = onLoad;
            return done();
          };
          return container.load('MyApp');
        });
        return it('should call error() if app doesn\'t exist', function(done) {
          var error;

          error = container.error;
          container.error = function() {
            container.error = error;
            return done();
          };
          return container.load('foo');
        });
      });
      return describe('error()', function() {
        return it('should throw an exception', function() {
          var fn;

          container.error = function() {
            throw "error";
          };
          fn = function() {
            return container.error();
          };
          return expect(fn).to["throw"]();
        });
      });
    });
  });

}).call(this);
